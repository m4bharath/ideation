from airflow import DAG
from airflow.operators.dummy import DummyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.branch import BranchPythonOperator
from airflow.utils.dates import days_ago
from airflow.utils.task_group import TaskGroup

# Define default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'retries': 1,
}

# Initialize the DAG
with DAG(
    'tg_write_stage_load',
    default_args=default_args,
    description='A DAG with conditional execution and TaskGroup',
    schedule_interval=None,  # Set to your desired schedule
    start_date=days_ago(1),
    catchup=False,
    params={'skip_stage_flag': 'N'}  # Default value for demonstration
) as dag:

    # Define the branching function
    def branch_decision(**kwargs):
        # Retrieve skip_stage_flag from DAG parameters
        skip_stage_flag = kwargs['params'].get('skip_stage_flag', 'N')
        if skip_stage_flag == 'Y':
            return 'task_group.t_dummy_task'  # Run t_dummy_task if skip_stage_flag is 'Y'
        else:
            return 'task_group.t_stg_load'    # Run t_stg_load if skip_stage_flag is 'N'

    # BranchPythonOperator to determine the execution path
    branching = BranchPythonOperator(
        task_id='branching',
        python_callable=branch_decision,
        provide_context=True
    )

    # Define the start task
    start = DummyOperator(
        task_id='start'
    )

    # Define a TaskGroup to group the tasks
    with TaskGroup("task_group") as task_group:
        
        # Stage load task to run if skip_stage_flag is 'N'
        t_stg_load = DummyOperator(
            task_id='t_stg_load'
        )

        # Dummy task to run if skip_stage_flag is 'Y'
        t_dummy_task = DummyOperator(
            task_id='t_dummy_task'
        )

    # Define the DM_LOAD task
    dm_load = DummyOperator(
        task_id='dm_load'
    )

    # Define the end task
    end = DummyOperator(
        task_id='end'
    )

    # Define task dependencies
    start >> branching
    
    # Branching task's output should lead to the appropriate task in the TaskGroup
    branching >> task_group

    # All tasks in task_group should be handled separately:
    t_stg_load >> dm_load
    t_dummy_task >> dm_load

    # End task
    dm_load >> end
